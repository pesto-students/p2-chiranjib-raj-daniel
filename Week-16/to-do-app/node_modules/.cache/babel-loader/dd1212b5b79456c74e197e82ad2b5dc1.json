{"ast":null,"code":"import { addInstrumentationHandler, logger } from '@sentry/utils';\nimport { getActiveTransaction } from './utils.js';\n/**\n * Configures global error listeners\n */\n\nfunction registerErrorInstrumentation() {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\n\n\nfunction errorCallback() {\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    var status = 'internal_error';\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n\nexport { registerErrorInstrumentation };","map":{"version":3,"mappings":";;AAKA;AACA;AACA;;;EAEAA;EACAA;AACA;AAEA;AACA;AACA;;;AACA;EACA;;EACA;IACA;IACA;IACAC;EACA;AACA","names":["addInstrumentationHandler","activeTransaction"],"sources":["/Users/danielraj/Desktop/p2-chiranjib-raj-daniel/Week-16/to-do-app/node_modules/src/errors.ts"],"sourcesContent":["import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}