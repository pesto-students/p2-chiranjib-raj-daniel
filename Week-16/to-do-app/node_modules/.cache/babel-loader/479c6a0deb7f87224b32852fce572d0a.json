{"ast":null,"code":"import { createTransport } from '@sentry/core';\nimport { getNativeFetchImplementation } from './utils.js';\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\n\nfunction makeFetchTransport(options) {\n  let nativeFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getNativeFetchImplementation();\n\n  function makeRequest(request) {\n    var requestOptions = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      ...options.fetchOptions\n    };\n    return nativeFetch(options.url, requestOptions).then(response => ({\n      statusCode: response.status,\n      headers: {\n        'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n        'retry-after': response.headers.get('Retry-After')\n      }\n    }));\n  }\n\n  return createTransport(options, makeRequest);\n}\n\nexport { makeFetchTransport };","map":{"version":3,"mappings":";;AAMA;AACA;AACA;;4BAEAA,SAEA;EAAA,IADAC,WACA,uEADAC,8BACA;;EACA;IACA;MACAC,kBADA;MAEAC,cAFA;MAGAC,wBAHA;MAIAC,wBAJA;MAKA;IALA;IAQA;MACAC,2BADA;MAEAD;QACA,oEADA;QAEA;MAFA;IAFA;EAOA;;EAEA;AACA","names":["options","nativeFetch","getNativeFetchImplementation","body","method","referrerPolicy","headers","statusCode"],"sources":["/Users/danielraj/Desktop/p2-chiranjib-raj-daniel/Week-16/to-do-app/node_modules/src/transports/fetch.ts"],"sourcesContent":["import { createTransport } from '@sentry/core';\nimport { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\n\nimport { BrowserTransportOptions } from './types';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      ...options.fetchOptions,\n    };\n\n    return nativeFetch(options.url, requestOptions).then(response => ({\n      statusCode: response.status,\n      headers: {\n        'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n        'retry-after': response.headers.get('Retry-After'),\n      },\n    }));\n  }\n\n  return createTransport(options, makeRequest);\n}\n"]},"metadata":{},"sourceType":"module"}